// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmallSqliteKit.Service.Data;

#nullable disable

namespace SmallSqliteKit.Service.Migrations
{
    [DbContext(typeof(SqliteDataContext))]
    [Migration("20230112171440_AddDbOptimizeAndVacuum")]
    partial class AddDbOptimizeAndVacuum
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("SmallSqliteKit.Service.Models.BackupAudit", b =>
                {
                    b.Property<int>("BackupAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuditLog")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DatabaseBackupId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimestampCreated")
                        .HasColumnType("TEXT");

                    b.HasKey("BackupAuditId");

                    b.HasIndex("DatabaseBackupId");

                    b.ToTable("BackupAudits");
                });

            modelBuilder.Entity("SmallSqliteKit.Service.Models.Config", b =>
                {
                    b.Property<string>("ConfigName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConfigValue")
                        .HasColumnType("TEXT");

                    b.HasKey("ConfigName");

                    b.ToTable("Configs");
                });

            modelBuilder.Entity("SmallSqliteKit.Service.Models.DatabaseBackup", b =>
                {
                    b.Property<int>("DatabaseBackupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BackupFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DatabasePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastBackupTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastOptimizeTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUploadToDropboxTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastVacuumTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Optimize")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OptimizeFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UploadToDropbox")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UploadToDropboxFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Vacuum")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VacuumFrequency")
                        .HasColumnType("INTEGER");

                    b.HasKey("DatabaseBackupId");

                    b.ToTable("DatabaseBackups");
                });

            modelBuilder.Entity("SmallSqliteKit.Service.Models.BackupAudit", b =>
                {
                    b.HasOne("SmallSqliteKit.Service.Models.DatabaseBackup", "DatabaseBackup")
                        .WithMany()
                        .HasForeignKey("DatabaseBackupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DatabaseBackup");
                });
#pragma warning restore 612, 618
        }
    }
}
